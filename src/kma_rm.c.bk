/***************************************************************************
 *  Title: Kernel Memory Allocator
 * -------------------------------------------------------------------------
 *    Purpose: Kernel memory allocator based on the resource map algorithm
 *    Author: Stefan Birrer
 *    Copyright: 2004 Northwestern University
 ***************************************************************************/
/***************************************************************************
 *  ChangeLog:
 * -------------------------------------------------------------------------
 *    Revision 1.2  2009/10/31 21:28:52  jot836
 *    This is the current version of KMA project 3.
 *    It includes:
 *    - the most up-to-date handout (F'09)
 *    - updated skeleton including
 *        file-driven test harness,
 *        trace generator script,
 *        support for evaluating efficiency of algorithm (wasted memory),
 *        gnuplot support for plotting allocation and waste,
 *        set of traces for all students to use (including a makefile and README of the settings),
 *    - different version of the testsuite for use on the submission site, including:
 *        scoreboard Python scripts, which posts the top 5 scores on the course webpage
 *
 *    Revision 1.1  2005/10/24 16:07:09  sbirrer
 *    - skeleton
 *
 *    Revision 1.2  2004/11/05 15:45:56  sbirrer
 *    - added size as a parameter to kma_free
 *
 *    Revision 1.1  2004/11/03 23:04:03  sbirrer
 *    - initial version for the kernel memory allocator project
 *
 ***************************************************************************/
#ifdef KMA_RM
#define __KMA_IMPL__

/************System include***********************************************/
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>

/************Private include**********************************************/
#include "kma_page.h"
#include "kma.h"

/************Defines and Typedefs*****************************************/
/*  #defines and typedefs should have their names in all caps.
 *  Global variables begin with g. Global constants with k. Local
 *  variables should be in all lower case. When initializing
 *  structures and arrays, line everything up in neat columns.
 */

typedef struct buffer_t
{
  struct buffer_t* next_buffer;
  struct buffer_t* prev_buffer;
  kma_page_t* page;
  int size;
} buffer_header_t;

typedef struct
{
  kma_page_t* this;
  buffer_header_t* first_buffer;
  int page_counter;
  int buffer_counter;
} page_header_t;

/************Global Variables*********************************************/
page_header_t* first_page_header = NULL;

/************Function Prototypes******************************************/
void init_page_header(kma_page_t*);
buffer_header_t* find_buffer(kma_size_t);

void add_free_buffer(buffer_header_t*, kma_size_t size);
void remove_free_buffer(buffer_header_t*);

/************External Declaration*****************************************/

/**************Implementation***********************************************/

void*
kma_malloc(kma_size_t size)
{
  printf("ALLOC size = %d\n", size);
  kma_page_t* page;
  buffer_header_t* buffer;
  
  if ((size + sizeof(page_header_t*)) > PAGESIZE)
    return NULL;

  if (first_page_header == NULL) {
    page = get_page();
    first_page_header = (page_header_t*)(page->ptr);
    init_page_header(page);
  }

  buffer = find_buffer(size);
  (((page_header_t*)(BASEADDR(buffer)))->buffer_counter)++;

  return (void*)buffer;
}

void
init_page_header(kma_page_t* page)
{
  page_header_t* page_header = page->ptr;
  page_header->this = page;
  page_header->page_counter = 0;
  page_header->buffer_counter = 0;

  page_header->first_buffer = (buffer_header_t*)(page_header + sizeof(page_header_t));
  add_free_buffer(page_header->first_buffer, PAGESIZE - sizeof(page_header_t));
}

buffer_header_t*
find_buffer(kma_size_t size)
{
  int header_size = sizeof(buffer_header_t);
  kma_page_t* page;

  buffer_header_t* current_buffer = first_page_header->first_buffer;

  size = ((size < header_size) ? header_size : size);

  while (current_buffer)
  {
    if (current_buffer->size < size)
    {
      current_buffer = current_buffer->next_buffer;
      continue;
    }
    else if ((current_buffer->size == size) || (current_buffer->size < (header_size + size)))
    {
      remove_free_buffer(current_buffer);
      return current_buffer;
    }
    else
    {
      add_free_buffer(current_buffer + size, current_buffer->size - size);
      remove_free_buffer(current_buffer);
      return current_buffer;
    }
  }

      //printf("buffer size %d, size %d\n", current_buffer->size, size);
  page = get_page();
  init_page_header(page);
  first_page_header->page_counter++;

  return find_buffer(size);
}

void
add_free_buffer(buffer_header_t* buffer, kma_size_t size)
{
  buffer_header_t* current_buffer = first_page_header->first_buffer;

  buffer->size = size;
  buffer->prev_buffer = NULL;

  /* The new free buffer is before the first buffer */
  if (buffer < current_buffer)
  {
    first_page_header->first_buffer->prev_buffer = buffer;
    buffer->next_buffer = first_page_header->first_buffer; 
    first_page_header->first_buffer = buffer;
    return;
  }
  /* The new free buffer is the first buffer */
  else if (buffer == current_buffer)
  {
    buffer->next_buffer = NULL;
    return;
  }
  else
  {
    while ((current_buffer->next_buffer != NULL) && (current_buffer < buffer))
      current_buffer = current_buffer->next_buffer;

    buffer->next_buffer = current_buffer->next_buffer;
    buffer->prev_buffer = current_buffer;
    if (current_buffer->next_buffer)
      current_buffer->next_buffer->prev_buffer = buffer;
    current_buffer->next_buffer = buffer;
  }
}

void
remove_free_buffer(buffer_header_t* buffer)
{
  buffer_header_t* next_buffer = buffer->next_buffer;
  buffer_header_t* prev_buffer = buffer->prev_buffer;

  /* There is only one buffer in the list */
  if (next_buffer == NULL && prev_buffer == NULL)
  {
    first_page_header->first_buffer = NULL;
    return;
  }

  else if (next_buffer == NULL)
  {
    prev_buffer->next_buffer = NULL;
    return;
  }

  else if (prev_buffer == NULL)
  {
    next_buffer->prev_buffer = NULL;
    first_page_header->first_buffer = next_buffer;
    return;
  }
  else
  {
    prev_buffer->next_buffer = next_buffer;
    next_buffer->prev_buffer = prev_buffer;
    return;
  }
}

void
kma_free(void* ptr, kma_size_t size)
{
  printf("FREE size = %d\n", size);
  int is_continue = 1, num_page;
  page_header_t* page_header = BASEADDR(ptr);
  page_header_t* last_page_header;
  buffer_header_t* current_buffer;

  page_header->buffer_counter -= 1;

  add_free_buffer(ptr, size);

  num_page = first_page_header->page_counter;
  for (; is_continue; num_page--)
  {
     last_page_header = first_page_header + num_page * PAGESIZE;
     is_continue = 0;

     if (last_page_header->buffer_counter == 0)
     {
       is_continue = 1;
       current_buffer = first_page_header->first_buffer;
       while (current_buffer)
       {
         if (BASEADDR(current_buffer) == last_page_header)
           remove_free_buffer(current_buffer);

         current_buffer = current_buffer->next_buffer;
       }

       is_continue = 1;
       if (last_page_header == first_page_header)
       {
         is_continue = 0;
         first_page_header = NULL;
       }

       free_page(last_page_header->this);

       if (first_page_header)
         first_page_header->page_counter--;
     }
  }
}

#endif // KMA_RM
